@@emit<cpp><[{
#include <cstdint>
#include <stdio.h>
#include <vector>
namespace Runtime {
using Int8=int8_t;
using Int16=int16_t;
using Int32=int32_t;
using Int64=int64_t;
using UInt8=uint8_t;
using UInt16=uint16_t;
using UInt32=uint32_t;
using UInt64=uint64_t;
using Float32=float;
using Float64=double;
using Char=char;
using Void=void;
using CString=const char*;
using CStringPtr=const char**;
using True=std::true_type;
using False=std::false_type;
void print(CString msg){
printf("%s",msg);
}
template<typename T>
void printv(std::vector<T> vec){
Int32 pos=0;
for(T& val : vec){
printf("Element(%d): %ld\n",pos++,(Int64)val);
}
}
void println(CString msg){
printf("%s\n",msg);
}
}
}]>
@@emit<python3><[{
# this should be omited from the compiled form the output
# as the only valid target lanugage is cpp
}]>
module Runtime {
@@type Int8;
@@type Int16;
@@type Int32;
@@type Int64;
@@type UInt8;
@@type UInt16;
@@type UInt32;
@@type UInt64;
@@type Float32;
@@type Float64;
@@type Char;
@@type Void;
@@type CString;
@@type CStringPtr;
@@func Void print(CString: msg);
@@func Void println(CString: msg);
@@type True;
@@type False;
}
module Test {
from Runtime import *;
func Int32[] iota(Int8: max){
Int32 current := 0;
Int32[max] result;
while(current < max){
result[current] := current;
current := current + 1;
}
return result;
}
Int64[64] fibCache;
func Int64 fib(Int8: i){
Int64& cached := fibCache[i];
if(cached !=0){
return cached;
}
if(i<=1){
cached := 1;
}elif(i==2){
cached := 2;
}else{
cached := fib(i - 2) + fib(i-1);
}
return cached;
}
func Int64[] fibRange(Int8: max){
Int64[max] result;
Int8 current := 0;
while(current < max){
result[current] := fib(current);
current := current + 1;
}
return result;
}
struct Object {}
}
from Runtime import Int32;
from Runtime import CStringPtr;
func Int32 main(Int32: argc, CStringPtr: args){
from Runtime import *;
Int8 max := 64;
Int8 byte;
Int8& byte_ref := byte;
Int8* byte_pointer;
Int8** byte_pointer_pointer;
println("hello world");
{
from Test import iota;
printf("iota(%d):\n",max);
Int32[max] data;
data := iota(max);
printv(data);
}
{
from Test import fibRange;
printf("fibRange(%d):\n",max);
auto data := fibRange(max);
printv(data);
}
return 0;
}
@@emit<cpp><[{
Int32 main(Int32 argc, const char** args){ return __main__(argc,args);}
}]>
