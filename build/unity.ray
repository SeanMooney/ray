@@emit<cpp><[{
#include <cstdint>
#include <stdio.h>
#include <vector>
namespace Runtime {
using Int8=int8_t;
using Int16=int16_t;
using Int32=int32_t;
using Int64=int64_t;
using UInt8=uint8_t;
using UInt16=uint16_t;
using UInt32=uint32_t;
using UInt64=uint64_t;
using Float32=float;
using Float64=double;
using Char=char;
using Void=void;
using CString=const char*;
using CStringPtr=const char**;
using True=std::true_type;
using False=std::false_type;
void print(CString msg){
printf("%s",msg);
}
template<typename T>
void printv(std::vector<T> vec){
Int32 pos=0;
for(T& val : vec){
printf("Element(%d): %ld\n",pos++,(Int64)val);
}
}
void println(CString msg){
printf("%s\n",msg);
}
}
}]>
@@emit<python3><[{
# this should be omited from the compiled form the output
# as the only valid target lanugage is cpp
}]>
module Runtime {
@@type Int8;
@@type Int16;
@@type Int32;
@@type Int64;
@@type UInt8;
@@type UInt16;
@@type UInt32;
@@type UInt64;
@@type Float32;
@@type Float64;
@@type Char;
@@type Void;
@@type CString;
@@type CStringPtr;
@@func Void print(CString: msg);
@@func Void println(CString: msg);
@@type True;
@@type False;
}
module Utils {
from Runtime import CString;
def func CString message(){
return "hello from utils";
}
}
module Temp{
# import Runtime;
from Runtime import CString;
from Runtime import Void;
from Runtime import print;
def func Void printMessage(CString:msg){
print(msg);
}
}
module Temp{
# import Runtime;
from Runtime import CString;
from Runtime import Void;
from Runtime import println;
def func Void printMessageln(CString:msg){
println(msg);
}
def struct MyClass{
def func CString __str__(){
return "<MyClass>";
}
def func CString __repr__(){
return "MyClass()";
}
}
}
from Runtime import Int32;
from Runtime import CStringPtr;
def func Int32 main( Int32: argc, CStringPtr: args){
from Temp import printMessage;
Int32 x := 42;
Int32[100] y;
printMessage("hello world");
return 0;
}
@@emit<cpp><[{
Int32 main(Int32 argc, const char** args){ return __main__(argc,args);}
}]>
