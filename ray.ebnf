start: _statement+
_statement:  commnet | _define_statement | _declare_statement
                     | assignment_statement | block_statement
                     | expression_satement | return_statement
STATEMENT_END: ";"
commnet: /\#[^\n]*/

block_statement: _block
_block: LBRACE _statement* RBRACE

return_statement: _RETURN _rval STATEMENT_END
_RETURN: "return"

_type_name: aggregate_type_name | scalar_type_name
scalar_type_name: /[A-Z][a-zA-Z0-9_]*/
aggregate_type_name: /[A-Z][a-zA-Z0-9_]*/  LBRAK RBRAK
name: /[_a-z][a-zA-Z0-9_]*/

expression_operator: PLUS | MINUS | LPREN | RPREN
                   | LBRAK | RBRAK | LANGLE | RANGLE | COLON

PLUS:  "+"
MINUS: "-"

BITOR: "|"
BITAND: "&"
AND: "&&"
OR: "||"
NOT: "!"

number: OCT_NUMBER | HEX_NUMBER | BIN_NUMBER | DEC_NUMBER | FLOAT_NUMBER

DEC_NUMBER: /-?[0-9]+/
BIN_NUMBER: /0b[0-1]+/
HEX_NUMBER: /0x[\da-f]+/
OCT_NUMBER: /0\o[0-7]+/
FLOAT_NUMBER: /((\d+\.\d*|\.\d+)(e[-+]?\d+)?|\d+(e[-+]?\d+))/

string: STRING | LONG_STRING
STRING : /[ubf]?r?("(?!"").*?(?<!\\)(\\\\)*?"|'(?!'').*?(?<!\\)(\\\\)*?')/
LONG_STRING: /[ubf]?r?(""".*?(?<!\\)(\\\\)*?"""|'''.*?(?<!\\)(\\\\)*?''')/s

assignment_statement: name _assignment_operators _rval STATEMENT_END
_assignment_operators: ASSIGNMENT | ADDASSIGN | SUBASSIGN | MULASSIGN | DIVASSIGN
                     | LSHIFTASSIGN | RSHIFTASSIGN | POWERASSIGN | ORASSIGN | ANDASSIGN

ASSIGNMENT: ":="
ADDASSIGN: "+="
SUBASSIGN: "-="
MULASSIGN: "*="
DIVASSIGN: "/="
LSHIFTASSIGN: "<<="
RSHIFTASSIGN: ">>="
POWERASSIGN: "^="
ORASSIGN: "|="
ANDASSIGN: "&="

NOTEQ: "!="

PIPE: "Â¦"
COMMA: ","
COLON: ":"
LPREN:  "("
RPREN:  ")"
LBRAK:  "["
RBRAK:  "]"
LBRACE: "{"
RBRACE: "}"
LANGLE: "<"
RANGLE: ">"
ESCAPE: "\\"

paramaters: _paramater (COMMA _paramater)*
_paramater: _type_name COLON name (ASSIGNMENT _value)?

arguments: _argument (COMMA _argument)*
_argument: (name ASSIGNMENT)? _value

expression_satement: _expression STATEMENT_END
_expression: bin_expression | uniary_expression | call_expression
call_expression: name LPREN arguments? RPREN // add paramaters
bin_expression: _rval expression_operator _rval
uniary_expression: expression_operator _rval | _rval expression_operator
_rval: _value | _expression
_value: literal_value | runtime_value
literal_value: number | string+
runtime_value: name

_define_statement: class_define | function_define | variable_define
class_define: _DEFINE _STRUCT _type_name (COLON _type_name)? _block
function_define: _DEFINE _FUNCTION _type_name name LPREN paramaters? RPREN _block
variable_define: _type_name name ASSIGNMENT _value STATEMENT_END

_declare_statement: class_declaration | function_declaration | variable_declaration
class_declaration: _DEFINE _STRUCT _type_name STATEMENT_END
function_declaration: _DEFINE _FUNCTION _type_name name LPREN paramaters? RPREN STATEMENT_END
variable_declaration: _type_name name STATEMENT_END

keyword: _STRUCT | _DEFINE | _FUNCTION
_STRUCT: "struct"
_DEFINE: "def"
_FUNCTION: "func"


%import common.WS
%ignore WS
