start: _statement+
_statement:  comment | _define_statement | _declare_statement
                     | assignment_statement | block_statement
                     | expression_statement | return_statement
                     | condtional_statement | compiler_statement
STATEMENT_END: ";"
comment: /\#[^\n]*/

block_statement: _block
block: _block
_block: LBRACE _statement* RBRACE

return_statement: _RETURN _rval STATEMENT_END
_RETURN: "return"

_type_name:  aggregate_type_name | scalar_type_name | pointer_type_name
scalar_type_name: /[A-Z][a-zA-Z0-9_]*/
aggregate_type_name: /[A-Z][a-zA-Z0-9_]*/  LBRAK RBRAK
pointer_type_name: /[A-Z][a-zA-Z0-9_]*[\*]+/
constant_name: /[A-Z_]+/
name: /[_a-z][a-zA-Z0-9_]*/

_expression_operator: _comparision_ops | _logic_ops | _math_ops

_math_ops: PLUS | MINUS | MULTI | DIV | MOD
PLUS:  "+"
MINUS: "-"
MULTI: "*"
DIV: "/"
MOD: "%"

_logic_ops: BITOR | BITAND | AND | OR | NOT
BITOR: "|"
BITAND: "&"
AND: "&&"
OR: "||"
NOT: "!"

_comparision_ops: NOTEQ | EQ | GTEQ | LTEQ
                  | GT | LT | CMP
EQ: "=="
NOTEQ: "!="
GT: ">"
GTEQ: ">="
LT: "<"
LTEQ: "<="
CMP: "<=>"

number: OCT_NUMBER | HEX_NUMBER | BIN_NUMBER
      | DEC_NUMBER | FLOAT_NUMBER | FIXED_POINT_NUMBER

DEC_NUMBER: /-?[0-9]+/
BIN_NUMBER: /0b[0-1]+/
HEX_NUMBER: /0x[\da-f]+/
OCT_NUMBER: /0\o[0-7]+/
FIXED_POINT_NUMBER: /[-+]?((\d+\.\d*|\.\d+)(e[-+]?\d+)?|\d+(e[-+]?\d+))/
FLOAT_NUMBER: /[-+]?((\d+\.\d*|\.\d+)(e[-+]?\d+)?|\d+(e[-+]?\d+))[f]/

string: STRING | LONG_STRING
STRING : /[ubf]?r?("(?!"").*?(?<!\\)(\\\\)*?"|'(?!'').*?(?<!\\)(\\\\)*?')/
LONG_STRING: /[ubf]?r?(""".*?(?<!\\)(\\\\)*?"""|'''.*?(?<!\\)(\\\\)*?''')/s

assignment_statement: name _assignment_operators _rval STATEMENT_END
_assignment_operators: ASSIGNMENT | ADDASSIGN | SUBASSIGN | MULASSIGN | DIVASSIGN
                     | LSHIFTASSIGN | RSHIFTASSIGN | POWERASSIGN | ORASSIGN | ANDASSIGN

ASSIGNMENT: ":="
ADDASSIGN: "+="
SUBASSIGN: "-="
MULASSIGN: "*="
DIVASSIGN: "/="
LSHIFTASSIGN: "<<="
RSHIFTASSIGN: ">>="
POWERASSIGN: "^="
ORASSIGN: "|="
ANDASSIGN: "&="


PIPE: "Â¦"
COMMA: ","
COLON: ":"
LPREN:  "("
RPREN:  ")"
LBRAK:  "["
RBRAK:  "]"
LBRACE: "{"
RBRACE: "}"
LANGLE: "<"
RANGLE: ">"
ESCAPE: "\\"

paramaters: _paramater (COMMA _paramater)*
_paramater: _type_name COLON name (ASSIGNMENT _value)?

arguments: _argument (COMMA _argument)*
_argument: (name ASSIGNMENT)? _rval

expression_statement: _expression STATEMENT_END
_expression: bin_expression | uniary_expression | call_expression | construct_expression

call_expression: name LPREN arguments? RPREN
construct_expression: scalar_type_name LPREN arguments? RPREN | LBRACE arguments+  RBRACE
bin_expression: _rval _expression_operator _rval
uniary_expression: _expression_operator _rval | _rval _expression_operator

_rval: _expression | _value
_value: literal_value | runtime_value
literal_value: number | string+ | constant_name
runtime_value: name

condtional_statement: if_statement
                    | if_statement elif_statement
                    | if_statement else_statement
                    | if_statement elif_statement+ else_statement

if_statement: "if" LPREN _rval RPREN block
elif_statement: "elif" LPREN _rval RPREN block
else_statement: "else" block

compiler_statement: "@compiler" LANGLE name RANGLE escaped_block
escaped_block: /((<\[\{)([\s\S]*?)(\}\]>))/
_OPEN_ESCAPE_BLOCK: "<[{"
_CLOSE_ESCAPE_BLOCK: "}]>"

_define_statement: class_define | function_define | variable_define | operator_define
class_define: _DEFINE _STRUCT _type_name (COLON _type_name)? block
function_define: _DEFINE _FUNCTION _type_name name LPREN paramaters? RPREN block
variable_define: _type_name name ASSIGNMENT _rval STATEMENT_END
operator_define: _DEFINE _OPERATOR (scalar_type_name|name) LPREN paramaters? RPREN block

_declare_statement: class_declaration | function_declaration | variable_declaration
class_declaration: _DEFINE _STRUCT _type_name STATEMENT_END
function_declaration: _DEFINE _FUNCTION _type_name name LPREN paramaters? RPREN STATEMENT_END
variable_declaration: _type_name name STATEMENT_END

keyword: _STRUCT | _DEFINE | _FUNCTION | _OPERATOR
_STRUCT: "struct"
_DEFINE: "def"
_FUNCTION: "func"
_OPERATOR: "op"

%import common.WS
%ignore WS
