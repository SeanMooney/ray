start: _statement+
_statement:  comment | _define_statement | _declare_statement
                     | assignment_statement | block_statement
                     | expression_statement | return_statement
                     | condtional_statement | _compiler_statement
                     | _iteration_statement | module_statement
                     | import_statement | from_statement
                     | include_statement
STATEMENT_END: ";"
comment: /\#[^\n]*/

block_statement: _block
block: _block
_block: LBRACE _statement* RBRACE

return_statement: _RETURN _rval STATEMENT_END
_RETURN: "return"

_type_name:  aggregate_type_name | scalar_type_name | pointer_type_name | ref_type_name
scalar_type_name: /[A-Z][a-zA-Z0-9_]*/ | AUTO
ref_type_name: /[A-Z][a-zA-Z0-9_]*[\&]/ | AUTO "&"
aggregate_type_name: /[A-Z][a-zA-Z0-9_]*/  LBRAK RBRAK
pointer_type_name: /[A-Z][a-zA-Z0-9_]*[\*]+/ | AUTO "*"
constant_name: /[A-Z_]+/
name: /[_a-z][a-zA-Z0-9_]*/

//_template_names: scalar_type_name | template_type_name
//template_type_name: /[A-Z][a-zA-Z0-9_]*/ template_args
//template_args: _LANGLE _template_names (_COMMA _template_names)* _RANGLE

_expression_operator: _comparision_ops | _logic_ops | _math_ops | subscript

subscript: LBRAK _rval RBRAK

_math_ops: PLUS | MINUS | MULTI | DIV | MOD
PLUS:  "+"
MINUS: "-"
MULTI: "*"
DIV: "/"
MOD: "%"

_logic_ops: BITOR | BITAND | AND | OR | NOT
BITOR: "|"
BITAND: "&"
AND: "&&"
OR: "||"
NOT: "!"

_comparision_ops: NOTEQ | EQ | GTEQ | LTEQ
                  | GT | LT | CMP
EQ: "=="
NOTEQ: "!="
GT: _RANGLE
GTEQ: ">="
LT: _LANGLE
LTEQ: "<="
CMP: "<=>"

number: OCT_NUMBER | HEX_NUMBER | BIN_NUMBER
      | DEC_NUMBER | FLOAT_NUMBER | FIXED_POINT_NUMBER

DEC_NUMBER: /-?[0-9]+/
BIN_NUMBER: /0b[0-1]+/
HEX_NUMBER: /0x[\da-f]+/
OCT_NUMBER: /0o[0-7]+/
FIXED_POINT_NUMBER: /[-+]?((\d+\.\d*|\.\d+)(e[-+]?\d+)?|\d+(e[-+]?\d+))/
FLOAT_NUMBER: /[-+]?((\d+\.\d*|\.\d+)(e[-+]?\d+)?|\d+(e[-+]?\d+))[f]/

string: STRING | LONG_STRING
STRING : /[ubf]?r?("(?!"").*?(?<!\\)(\\\\)*?"|'(?!'').*?(?<!\\)(\\\\)*?')/
LONG_STRING: /[ubf]?r?(""".*?(?<!\\)(\\\\)*?"""|'''.*?(?<!\\)(\\\\)*?''')/s

assignment_statement: (name | name LBRAK _rval? RBRAK ) _assignment_operators _rval STATEMENT_END
_assignment_operators: ASSIGNMENT | ADDASSIGN | SUBASSIGN | MULASSIGN | DIVASSIGN
                     | LSHIFTASSIGN | RSHIFTASSIGN | POWERASSIGN | ORASSIGN | ANDASSIGN

ASSIGNMENT: ":="
ADDASSIGN: "+="
SUBASSIGN: "-="
MULASSIGN: "*="
DIVASSIGN: "/="
LSHIFTASSIGN: "<<="
RSHIFTASSIGN: ">>="
POWERASSIGN: "^="
ORASSIGN: "|="
ANDASSIGN: "&="

_PIPE: "Â¦"
_COMMA: ","
_COLON: ":"
_LPREN:  "("
_RPREN:  ")"
_LBRAK:  "["
_RBRAK:  "]"
_LBRACE: "{"
_RBRACE: "}"
_LANGLE: "<"
_RANGLE: ">"
_ESCAPE: "\\"

PIPE:   _PIPE
COMMA:  _COMMA
COLON:  _COLON
LPREN:  _LPREN
RPREN:  _RPREN
LBRAK:  _LBRAK
RBRAK:  _RBRAK
LBRACE: _LBRACE
RBRACE: _RBRACE
LANGLE: _LANGLE
RANGLE: _RANGLE
ESCAPE: _ESCAPE



paramaters: _paramater (COMMA _paramater)*
_paramater: _type_name COLON name (ASSIGNMENT _value)?

arguments: _argument (COMMA _argument)*
_argument: (name ASSIGNMENT)? _rval

expression_statement: _expression STATEMENT_END
_expression: bin_expression | _uniary_expression | call_expression | construct_expression

call_expression: name LPREN arguments? RPREN
construct_expression: scalar_type_name LPREN arguments? RPREN | LBRACE arguments+  RBRACE
bin_expression: _rval _expression_operator _rval
_uniary_expression: prefix_expression | postfix_expression
prefix_expression: _expression_operator _rval
postfix_expression: _rval _expression_operator

_rval: _expression | _value
_value: literal_value | runtime_value
literal_value: number | string+ | constant_name
runtime_value: name

condtional_statement: if_statement
                    | if_statement elif_statement
                    | if_statement else_statement
                    | if_statement elif_statement+ else_statement

if_statement: "if" LPREN _rval RPREN block
elif_statement: "elif" LPREN _rval RPREN block
else_statement: "else" block

_iteration_statement: while_statement | for_statement
while_statement: "while" LPREN _rval RPREN block
for_statement: "for" LPREN _type_name name "in" _rval RPREN block

_compiler_statement: emit_statement | _extern_statements
emit_statement: "@@emit" LANGLE name RANGLE escaped_block
_extern_statements: extern_type | extern_var | extern_func | extern_module
extern_type: "@@type" _type_name (LBRACE _extern_statements+  RBRACE | STATEMENT_END )
extern_func: "@@func" _type_name name LPREN paramaters? RPREN STATEMENT_END
extern_var: "@@var" variable_declaration
extern_module: "@@module" scalar_type_name (LBRACE _extern_statements+  RBRACE | STATEMENT_END )
escaped_block: /((<\[\{)([\s\S]*?)(\}\]>))/
_OPEN_ESCAPE_BLOCK: "<[{"
_CLOSE_ESCAPE_BLOCK: "}]>"

_define_statement: class_define | function_define | variable_define | operator_define //| template_class_define
class_define: _DEFINE _STRUCT _type_name (COLON _type_name)? block
// template_class_define: _DEFINE _STRUCT template_type_name block
function_define: _DEFINE _FUNCTION _type_name name LPREN paramaters? RPREN block
variable_define: scalar_define | aggregate_define
scalar_define: (scalar_type_name|pointer_type_name|ref_type_name) name ASSIGNMENT _rval STATEMENT_END
aggregate_define: scalar_type_name LBRAK _rval RBRAK name ASSIGNMENT _rval STATEMENT_END
operator_define: _DEFINE _OPERATOR (scalar_type_name|name) LPREN paramaters? RPREN block

_declare_statement: class_declaration | function_declaration | variable_declaration
class_declaration: _DEFINE _STRUCT _type_name STATEMENT_END
function_declaration: _DEFINE _FUNCTION _type_name name LPREN paramaters? RPREN STATEMENT_END
variable_declaration: scalar_declaration | aggregate_declaration
scalar_declaration: (scalar_type_name|pointer_type_name|ref_type_name) name STATEMENT_END
aggregate_declaration: scalar_type_name LBRAK _rval RBRAK name STATEMENT_END

module_statement: MODULE scalar_type_name block
import_statement: IMPORT scalar_type_name STATEMENT_END
from_statement: FROM scalar_type_name  IMPORT (name|scalar_type_name) STATEMENT_END
include_statement: INCLUDE /[a-z\/]+/ STATEMENT_END

keyword: _STRUCT | _DEFINE | _FUNCTION | _OPERATOR
       | AUTO | CONST | MUTABLE | MODULE | IMPORT | FROM

_STRUCT: "struct"
_DEFINE: "def"
_FUNCTION: "func"
_OPERATOR: "op"

AUTO: "auto"
CONST: "const"
MUTABLE: "mutable"
MODULE: "module"
IMPORT: "import"
FROM: "from"
INCLUDE: "include"

%import common.WS
%ignore WS
